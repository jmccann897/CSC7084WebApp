<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bootstrap Chart JS example</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <div class=".container"><%- include('header'); %></div>

    <div class=".container"><%- include('nav'); %></div>

    <div class="col-8 offset-2 my-5">
      <div class="card mt-3">
        <!-- chart will be in here-->
        <div class="card-body">
          <h5>Total Score for Emotion</h5>
          <hr />
          <canvas id="emotioncount"></canvas>
          <!-- Chart.js renders chart elements on an HTML5 canvas 
                    unlike several others, mostly D3.js-based, charting libraries that render as SVG. 
                    Canvas rendering makes Chart.js very performant, especially for large datasets 
                    and complex visualizations that would otherwise require thousands of SVG nodes 
                    in the DOM tree.-->
        </div>
      </div>

      <div class="card mt-3">
        <!-- chart will be in here-->
        <div class="card-body">
          <h5>Emotion Total Radar</h5>
          <hr />
          <canvas id="emotiontotalradar"></canvas>
        </div>
      </div>

      <div class="card mt-3">
        <!-- chart will be in here-->
        <div class="card-body">
          <h5>Average Emotion Score</h5>
          <hr />
          <canvas id="emotionaverage"></canvas>
        </div>
      </div>

      <div class="card mt-3">
        <!-- chart will be in here-->
        <div class="card-body">
          <h5>Emotions over time</h5>
          <hr />
          <canvas id="emotionbytime"></canvas>
        </div>
      </div>

      <div class="card mt-3">
        <!-- chart will be in here-->
        <div class="card-body">
          <h5>Emotion Calendar</h5>
          <hr />
          <canvas id="emotioncalendar"></canvas>
        </div>
      </div>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"
    ></script>

    <!-- Does this need to be the umd version?? -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js"
      integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <!-- Date adaptor date-fns used (Source - https://github.com/chartjs/chartjs-adapter-date-fns)-->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

    <!-- Chart JS matrix graph source-->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@1.1.1"></script>

    <script>
      //Data processing for ctx, ctx1, ctx2, ctx3
      //need to convert data from page render to JSON
      const total_data = `<%- JSON.stringify(total_data) %>`;
      const yvals1 = JSON.parse(total_data); //parse JSON data
      console.log(`yvals for avgs: ${yvals1}`);

      const average_data = `<%- JSON.stringify(avg_data) %>`;
      const yvals2 = JSON.parse(average_data);
      console.log(`yvals for avgs: ${yvals2}`);

      const happy_data = `<%- JSON.stringify(happy_scores) %>`;
      const happy_xydata = JSON.parse(happy_data);
      const happy_xdata = [];
      const happy_ydata = [];
      //console.log(`x,y values for happy: ${happy_xydata}`);
      for (let i = 0; i < happy_xydata.length; i++) {
        //console.log(`i: ${i} --> value: ${happy_xydata[i]}`);
        if (i % 2 === 0) {
          happy_xdata.push(happy_xydata[i]);
        } else {
          happy_ydata.push(happy_xydata[i]);
        }
      }
      console.log(happy_xdata);
      console.log(happy_ydata);

      //sad
      const sad_data = `<%- JSON.stringify(sad_scores) %>`;
      const sad_xydata = JSON.parse(sad_data);
      const sad_xdata = [];
      const sad_ydata = [];
      for (let i = 0; i < sad_xydata.length; i++) {
        if (i % 2 === 0) {
          sad_xdata.push(sad_xydata[i]);
        } else {
          sad_ydata.push(sad_xydata[i]);
        }
      }

      //disgust
      const disgust_data = `<%- JSON.stringify(sad_scores) %>`;
      const disgust_xydata = JSON.parse(disgust_data);
      const disgust_xdata = [];
      const disgust_ydata = [];
      for (let i = 0; i < disgust_xydata.length; i++) {
        if (i % 2 === 0) {
          disgust_xdata.push(disgust_xydata[i]);
        } else {
          disgust_ydata.push(disgust_xydata[i]);
        }
      }

      //contempt
      const contempt_data = `<%- JSON.stringify(sad_scores) %>`;
      const contempt_xydata = JSON.parse(contempt_data);
      const contempt_xdata = [];
      const contempt_ydata = [];
      for (let i = 0; i < contempt_xydata.length; i++) {
        if (i % 2 === 0) {
          contempt_xdata.push(contempt_xydata[i]);
        } else {
          contempt_ydata.push(contempt_xydata[i]);
        }
      }

      //anger
      const anger_data = `<%- JSON.stringify(sad_scores) %>`;
      const anger_xydata = JSON.parse(anger_data);
      const anger_xdata = [];
      const anger_ydata = [];
      for (let i = 0; i < anger_xydata.length; i++) {
        if (i % 2 === 0) {
          anger_xdata.push(anger_xydata[i]);
        } else {
          anger_ydata.push(anger_xydata[i]);
        }
      }

      //fear
      const fear_data = `<%- JSON.stringify(sad_scores) %>`;
      const fear_xydata = JSON.parse(fear_data);
      const fear_xdata = [];
      const fear_ydata = [];
      for (let i = 0; i < fear_xydata.length; i++) {
        if (i % 2 === 0) {
          fear_xdata.push(fear_xydata[i]);
        } else {
          fear_ydata.push(fear_xydata[i]);
        }
      }

      //surprise
      const surprise_data = `<%- JSON.stringify(sad_scores) %>`;
      const surprise_xydata = JSON.parse(surprise_data);
      const surprise_xdata = [];
      const surprise_ydata = [];
      for (let i = 0; i < surprise_xydata.length; i++) {
        if (i % 2 === 0) {
          surprise_xdata.push(surprise_xydata[i]);
        } else {
          surprise_ydata.push(surprise_xydata[i]);
        }
      }
      //data has been json parsed into js object
    </script>
    <script>
      //SET UP
      const ctx = document.getElementById("emotioncount");
      const labels = [
        "Happiness",
        "Sadness",
        "Anger",
        "Disgust",
        "Contempt",
        "Surprise",
        "Fear",
      ];
      const ctxdata = {
        labels: labels,
        datasets: [
          {
            label: "Emotion Totals",
            data: yvals1, //data in array
            borderWidth: 1,
            backgroundColor: [
              "rgba(255, 205, 86, 0.2)", //yellow
              "rgba(54, 162, 235, 0.2)", //blue
              "rgba(255, 99, 132, 0.2)", //red
              "rgba(75, 192, 192, 0.2)", //green
              "rgba(201, 203, 207, 0.2)", //grey
              "rgba(255, 159, 64, 0.2)", //orange
              "rgba(153, 102, 255, 0.2)", //purple
            ],
          },
        ],
      };
      //CONFIG
      const ctxconfig = {
        type: "bar",
        data: ctxdata,
        options: {
          scales: {
            y: {
              beginAtZero: true,
            },
          },
        },
      };
      //RENDER
      var ctxChart = new Chart(ctx, ctxconfig);
    </script>

    <script>
      //SET UP
      const ctx1 = document.getElementById("emotiontotalradar");
      const ctx1data = {
        labels: labels,
        datasets: [
          {
            label: "Emotion Totals Radar",
            data: yvals1,
            fill: true,
            backgroundColor: "rgba(255, 99, 132, 0.2)",
            borderColor: "rgb(255, 99, 132)",
            pointBackgroundColor: "rgb(255, 99, 132)",
            pointBorderColor: "#fff",
            pointHoverBackgroundColor: "#fff",
            pointHoverBorderColor: "rgb(255, 99, 132)",
          },
        ],
      };

      //CONFIG
      const ctx1config = {
        type: "radar",
        data: ctx1data,
        options: {
          elements: {
            line: {
              borderWidth: 3,
            },
          },
        },
      };

      //RENDER
      var ctx1Chart = new Chart(ctx1, ctx1config);
    </script>

    <script>
      //SETUP
      const ctx2 = document.getElementById("emotionaverage");

      const ctx2data = {
        labels: labels,
        datasets: [
          {
            label: "Emotion Average",
            data: yvals2,
            backgroundColor: [
              "rgba(255, 205, 86, 0.2)",
              "rgba(54, 162, 235, 0.2)",
              "rgba(255, 99, 132, 0.2)",
              "rgba(75, 192, 192, 0.2)",
              "rgba(201, 203, 207, 0.2)",
              "rgba(153, 102, 255, 0.2)",
              "rgba(255, 159, 64, 0.2)",
            ],

            borderWidth: 1,
          },
        ],
      };

      //CONFIG
      const ctx2config = {
        type: "bar",
        data: ctx2data,
        options: {
          scales: {
            y: {
              beginAtZero: true,
            },
          },
        },
      };

      //RENDER
      var ctx2Chart = new Chart(ctx2, ctx2config);
    </script>

    <script>
      //SET UP
      const ctx3 = document.getElementById("emotionbytime");

      //line object creation source - https://www.youtube.com/watch?v=MyWcp3GOeeE
      //date formatting source - https://www.youtube.com/watch?v=DnjlLbOsPlM
      const x1 = happy_xdata;
      const y1 = happy_ydata;

      const happyLine = x1.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y1[index];
        return lineObject;
      });
      console.log(happyLine);

      const x2 = sad_xdata;
      const y2 = sad_ydata;
      const sadLine = x2.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y2[index];
        return lineObject;
      });
      console.log(sadLine);

      const x3 = disgust_xdata;
      const y3 = disgust_ydata;
      const disgustLine = x3.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y3[index];
        return lineObject;
      });
      console.log(disgustLine);

      const x4 = contempt_xdata;
      const y4 = contempt_ydata;
      const contemptLine = x4.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y4[index];
        return lineObject;
      });
      console.log(contemptLine);

      const x5 = anger_xdata;
      const y5 = anger_ydata;
      const angerLine = x5.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y5[index];
        return lineObject;
      });
      console.log(angerLine);

      const x6 = fear_xdata;
      const y6 = fear_ydata;
      const fearLine = x6.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y6[index];
        return lineObject;
      });
      console.log(fearLine);

      const x7 = surprise_xdata;
      const y7 = surprise_ydata;
      const surpriseLine = x7.map((xvalue, index) => {
        let lineObject = {};
        lineObject.x = xvalue;
        lineObject.y = y7[index];
        return lineObject;
      });
      console.log(surpriseLine);

      //colour codeing source - https://tvtropes.org/pmwiki/pmwiki.php/Main/ColourCodedEmotions
      // translated to chart js chart colours https://www.chartjs.org/docs/latest/samples/utils.html

      const ctx3labels = happy_xdata;
      const ctx3data = {
        labels: ctx3labels,
        datasets: [
          {
            label: "Happiness",
            data: happyLine,
            fill: false,
            borderColor: "rgb(255,205,86)",
            backgroundColor: "rgb(255,205,86,0.2)",
            tension: 0.1,
          },
          {
            label: "Sadness",
            data: sadLine,
            fill: false,
            borderColor: "rgb(54,162,235)",
            backgroundColor: "rgb(54,162,235,0.2)",
            tension: 0.1,
          },
          {
            label: "Disgust",
            data: disgustLine,
            fill: false,
            borderColor: "rgb(75,192,192)",
            backgroundColor: "rgb(75,192,192,0.2)",
            tension: 0.1,
          },
          {
            label: "Contempt",
            data: contemptLine,
            fill: false,
            borderColor: "rgb(201,203,207)",
            backgroundColor: "rgb(201,203,207,0.2)",
            tension: 0.1,
          },
          {
            label: "Anger",
            data: angerLine,
            fill: false,
            borderColor: "rgb(255,99,132)",
            backgroundColor: "rgb(255,99,132,0.2)",
          },
          {
            label: "Fear",
            data: fearLine,
            fill: false,
            borderColor: "rgb(153,102,255)",
            backgroundColor: "rgb(153,102,255,0.2)",
            tension: 0.1,
          },
          {
            label: "Surprise",
            data: surpriseLine,
            fill: false,
            borderColor: "rgb(255,159,64)",
            backgroundColor: "rgb(255,159,64,0.2)",
            tension: 0.1,
          },
        ],
      };

      //CONFIG
      const ctx3config = {
        type: "line",
        data: ctx3data,
        options: {
          scales: {
            x: {
              type: "time",
              time: {
                unit: "day",
              },
              beginAtZero: true,
            },
            y: {
              beginAtZero: true,
            },
          },
        },
      };

      //RENDER
      var ctx3Chart = new Chart(ctx3, ctx3config);
    </script>

    <script>
      //SET UP
      const ctx4 = document.getElementById("emotioncalendar");
      const ctx4data = {
        datasets: [
          {
            label: "Basic matrix",
            data: [
              { x: 1, y: 1 },
              { x: 2, y: 1 },
              { x: 1, y: 2 },
              { x: 2, y: 2 },
            ],
            borderWidth: 1,
            borderColor: "rgba(0,0,0,0.5)",
            backgroundColor: "rgba(200,200,0,0.3)",
            width: ({ chart }) => (chart.chartArea || {}).width / 2 - 1,
            height: ({ chart }) => (chart.chartArea || {}).height / 2 - 1,
          },
        ],
      };

      //CONFIG
      const ctx4config = {
        type: "matrix",
        data: ctx4data,
        options: {
          scales: {
            x: {
              display: false,
              min: 0.5,
              max: 2.5,
              offset: false,
            },
            y: {
              display: false,
              min: 0.5,
              max: 2.5,
            },
          },
        },
      };

      //RENDER
      var ctx4Chart = new Chart(ctx4, ctx4config);
    </script>
  </body>
</html>
